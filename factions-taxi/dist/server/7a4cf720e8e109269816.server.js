(()=>{"use strict";const e={onPlayerDeath:"armoury:onPlayerDeath",onPlayerAuthenticate:"authentication:player-authenticated",onPlayerDisconnect:"playerDropped",onResourceStop:"onResourceStop",onContextMenuItemPressed:"armoury-overlay:context-menu-item-pressed",onPlayerEnterVehicle:"armoury:onPlayerEnterVehicle",onPlayerExitVehicle:"armoury:onPlayerExitVehicle",onPlayerClientsidedCacheLoaded:"armoury:player-resource-cache-loaded"};var t;!function(e){e[e.SERVER_TO_SERVER=0]="SERVER_TO_SERVER",e[e.SERVER_TO_CLIENT=1]="SERVER_TO_CLIENT",e[e.CLIENT_TO_SERVER=2]="CLIENT_TO_SERVER",e[e.CLIENT_TO_CLIENT=3]="CLIENT_TO_CLIENT"}(t||(t={}));const s=new Map,r=new Map,a=new Map;function i(){return function(e){return class extends e{constructor(...i){super(...i),s.has(e)&&s.get(e).forEach((([e,s,r])=>{r===t.CLIENT_TO_CLIENT?on(s,super[e].bind(this)):onNet(s,super[e].bind(this))})),r.has(e)&&r.get(e).forEach((e=>{exports(e,super[e].bind(this))})),a.has(e)&&a.get(e).forEach((([e,t])=>{RegisterCommand(e.toLowerCase(),((s,r,a)=>{Number(global.exports.authentication.getPlayerInfo(s,"adminLevel"))<t||super[e].call(this,s,r,a)}),!1)}))}}}}function o(r){return function(a,i,o){const n=e[i]||(null==r?void 0:r.eventName),l=(null==r?void 0:r.direction)||t.CLIENT_TO_SERVER;(null==n?void 0:n.length)?(s.has(a.constructor)||s.set(a.constructor,[]),s.get(a.constructor).some((([e,t,s])=>e===i))||s.get(a.constructor).push([i,n,l])):console.error(`${i} is not recognized as a default event, thus this listener won't work. Please use the eventName property inside the data parameter.`)}}function n(){return function(e,t,s){r.has(e.constructor)||r.set(e.constructor,[]),r.get(e.constructor).some((e=>e===t))||r.get(e.constructor).push(t)}}var l=function(e,t,s,r){var a,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,s):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,s,r);else for(var n=e.length-1;n>=0;n--)(a=e[n])&&(o=(i<3?a(o):i>3?a(t,s,o):a(t,s))||o);return i>3&&o&&Object.defineProperty(t,s,o),o};let c=class extends class extends class{constructor(){this.routingBucketCondition=(e,t)=>!0,this.assignServerBaseListeners()}RegisterAdminCommand(e,t,s,r){RegisterCommand(e,((e,r,a)=>{Number(global.exports.authentication.getPlayerInfo(e,"adminLevel"))<t||s(e,r,a)}),r)}assignServerBaseListeners(){onNet(`${GetCurrentResourceName()}:set-client-routing-bucket`,((e,t)=>{this.routingBucketCondition(e,t)&&SetEntityRoutingBucket(e,t)}))}}{removeClientsideVehicles(){TriggerClientEvent(`${GetCurrentResourceName()}:ARM_remove-vehicles`,-1)}}{constructor(){super(...arguments),this._clientsidedResourceMap=new Map}get clientsidedResourceMap(){return this._clientsidedResourceMap}getPlayerClientsidedCacheKey(e,t){if(this._clientsidedResourceMap.has(e)){const s=this._clientsidedResourceMap.get(e);if(s[t])return s[t]}return null}updatePlayerClientsidedCacheKey(e,t,s){const r=this._clientsidedResourceMap.has(e)&&this._clientsidedResourceMap.get(e)||{};r[t]=s,this._clientsidedResourceMap.set(e,r),TriggerClientEvent("armoury-overlay:update-resource-metadata",e,GetCurrentResourceName(),t,s)}onPlayerClientsidedCacheLoaded(e){e[GetCurrentResourceName()]&&this._clientsidedResourceMap.set(source,e[GetCurrentResourceName()])}onPlayerDisconnect(){this._clientsidedResourceMap.has(source)&&this._clientsidedResourceMap.delete(source)}};l([o()],c.prototype,"onPlayerClientsidedCacheLoaded",null),l([o()],c.prototype,"onPlayerDisconnect",null),c=l([i()],c);class u extends c{constructor(){super(),this._factionInternalId="",this._spawnedVehicles=[],this._pendingVehicles=[],this._assignDefaultListeners(),this._factionInternalId=GetCurrentResourceName().split("-")[1],GetCurrentResourceName().includes("factions-")||console.error("You are using a Faction controller but its name does NOT comply with the naming 'factions-<factionInternalId>'. The resource may not work properly.")}get factionInternalId(){return this._factionInternalId}get spawnedVehicles(){return this._spawnedVehicles}get pendingVehicles(){return this._pendingVehicles}isPlayerMemberOfThisFaction(e){return global.exports.factions.isPlayerMemberOfFaction(this.factionInternalId,e)}isVehicleOwnedByThisFaction(e){return this._spawnedVehicles.includes(e)}registerVehicles(e,...t){var s;const r=t.map((t=>Object.assign(Object.assign({},t),{color:e})));this._pendingVehicles=r,(null===(s=global.exports.armoury.getPlayers())||void 0===s?void 0:s.length)>0&&(this.spawnVehicles(r),console.log(`Players already online. Creating faction vehicles of faction '${this.factionInternalId}'.`))}_assignDefaultListeners(){onNet(`${GetCurrentResourceName()}:get-faction-information`,(()=>{const e=global.exports.factions.getFaction(this.factionInternalId);e&&TriggerClientEvent(`${GetCurrentResourceName()}:get-faction-information-response`,source,e)})),onNet("onResourceStop",(e=>{e===GetCurrentResourceName()&&(this.clearVehicleSpawnTimeout(),this.removeVehicles())})),onNet("authentication:player-authenticated",(()=>{var e;(null===(e=this.spawnedVehicles)||void 0===e?void 0:e.length)>0||(this.spawnVehicles(this._pendingVehicles),console.log(`A player has joined. Creating faction vehicles of faction '${this.factionInternalId}'.`))})),onNet("playerDropped",(()=>{var e;(null===(e=global.exports.armoury.getPlayers())||void 0===e?void 0:e.length)>0||(this.clearVehicleSpawnTimeout(),this.removeVehicles(),console.log(`No player left. Destroying faction vehicles of faction '${this.factionInternalId}'.`))}))}removeVehicle(e,t){DoesEntityExist(e)&&DeleteEntity(e),this._spawnedVehicles.indexOf(e)>-1&&(t||(this._spawnedVehicles.splice(this._spawnedVehicles.indexOf(e),1),this._pendingVehicles.splice(this._spawnedVehicles.indexOf(e),1)))}removeVehicles(){this._spawnedVehicles.forEach((e=>{this.removeVehicle(e,!0)})),this._spawnedVehicles=[]}spawnVehicles(e){this.vehicleSpawnTimeout=setTimeout((()=>{e.forEach((e=>{const t=CreateVehicle(e.modelHash,e.pos[0],e.pos[1],e.pos[2],0,!0,!0);this._spawnedVehicles.push(t),setTimeout((()=>{SetVehicleColours(t,e.color[0],e.color[1]),SetEntityRotation(t,e.pos[3],e.pos[4],e.pos[5],2,!0)}),5e3)})),this.vehicleSpawnTimeout=null}),2e3)}clearVehicleSpawnTimeout(){this.vehicleSpawnTimeout&&(clearTimeout(this.vehicleSpawnTimeout),this.vehicleSpawnTimeout=null)}}var h=function(e,t,s,r){var a,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,s):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,s,r);else for(var n=e.length-1;n>=0;n--)(a=e[n])&&(o=(i<3?a(o):i>3?a(t,s,o):a(t,s))||o);return i>3&&o&&Object.defineProperty(t,s,o),o};let y=class extends u{constructor(){super(),this.playersOnDuty=new Map,this.registerVehicles([88,88],{modelHash:-956048545,pos:[416.0439453125,-644.0439453125,28.100341796875,.0559806227684021,.00011413223546696827,-90.2237319946289]},{modelHash:-956048545,pos:[416.00439453125,-649.3713989257812,28.100341796875,-.0003272554313298315,.05598462000489235,-90.66983032226562]},{modelHash:-956048545,pos:[416.00439453125,-654.7648315429688,28.100341796875,1.6675267389132387e-8,.055975910276174545,-89.9999771118164]},{modelHash:-956048545,pos:[409.29229736328125,-652.0615234375,28.100341796875,.05597567558288574,-.0001638552057556808,90.33543395996094]},{modelHash:-956048545,pos:[409.27911376953125,-646.7472534179688,28.100341796875,.05597548186779022,.00021835426741745323,89.55299377441406]},{modelHash:-956048545,pos:[409.22637939453125,-641.4461669921875,28.100341796875,-5951902858214453e-20,.05598071217536926,89.88805389404297]},{modelHash:-956048545,pos:[409.17364501953125,-635.9736328125,28.100341796875,-.0559854656457901,.00010931194992735982,90.2237319946289]},{modelHash:-956048545,pos:[393.21759033203125,-638.6505737304688,28.100341796875,.055978551506996155,-.0004949465510435402,-88.99671173095703]},{modelHash:-956048545,pos:[393.29669189453125,-644.2549438476562,28.100341796875,.05598071217536926,5951489947619848e-20,-90.1119384765625]},{modelHash:-956048545,pos:[393.3230895996094,-649.6879272460938,28.100341796875,.05598049238324165,.00016869093815330416,-90.33541870117188]},{modelHash:-956048545,pos:[393.4021911621094,-655.028564453125,28.100341796875,.000381546764401719,.05597461387515068,-89.21891021728516]},{modelHash:-956048545,pos:[393.4021911621094,-660.6329345703125,28.1171875,-.18164598941802979,-1.7901086807250977,-89.12449645996094]})}getAvailableTaxiDrivers(){return this.playersOnDuty.size?Array.from(this.playersOnDuty.keys()).map((e=>[e,this.playersOnDuty.get(e).fare])):[[-1,25]]}startPlayerRide(e){const t=this.getPlayerFareCached(e);this.playersOnDuty.set(e,Object.assign(Object.assign({},this.playersOnDuty.get(e)),{taximeterOpen:!0,fare:t,currentRidePay:t,lastDistanceCheckTimestamp:Date.now(),lastDistanceCheckPosition:GetEntityCoords(GetPlayerPed(e),!0)})),global.exports["armoury-overlay"].setTaximeterValue(e,t);const s=this.playersOnDuty.get(e).riders;s.length&&s.forEach((e=>{global.exports["armoury-overlay"].setTaximeterValue(e,t)})),TriggerClientEvent(`${GetCurrentResourceName()}:ride-started`,e)}stopPlayerRide(e){if(this.playersOnDuty.has(e)){global.exports["armoury-overlay"].setTaximeterValue(e,0);const t=this.playersOnDuty.get(e).riders;t.length&&t.forEach((e=>{global.exports["armoury-overlay"].setTaximeterValue(e,0)})),this.playersOnDuty.set(e,Object.assign(Object.assign({},this.playersOnDuty.get(e)),{taximeterOpen:!1,currentRidePay:0}))}TriggerClientEvent(`${GetCurrentResourceName()}:ride-stopped`,e)}updatePlayerTaximeterValue(e,t){global.exports["armoury-overlay"].setTaximeterValue(e,t),this.playersOnDuty.has(e)&&this.playersOnDuty.set(e,Object.assign(Object.assign({},this.playersOnDuty.get(e)),{currentRidePay:t}))}addToPlayerTaximeterValue(e,t){this.playersOnDuty.has(e)&&this.updatePlayerTaximeterValue(e,this.playersOnDuty.get(e).currentRidePay+t)}isPlayerBusyWithRide(e){return this.playersOnDuty.has(e)&&this.playersOnDuty.get(e).taximeterOpen}startPlayerDuty(e){global.exports["armoury-overlay"].setTaximeterValue(e,0);const t=[];for(let s=0;s<3;s++){const r=GetPedInVehicleSeat(GetVehiclePedIsIn(GetPlayerPed(e),!1),s);if(r){const e=NetworkGetEntityOwner(r);t.push(e),this.updatePlayerTaximeterValue(e,0)}}this.playersOnDuty.set(e,{taximeterOpen:!1,fare:this.getPlayerFareCached(e),currentRidePay:0,lastDistanceCheckTimestamp:Date.now(),lastDistanceCheckPosition:GetEntityCoords(GetPlayerPed(e),!0),riders:t}),this.hideTaxiNotOnDutyMessage(e)}stopPlayerDuty(e,t=!1){if(this.playersOnDuty.has(e)){global.exports["armoury-overlay"].setTaximeterValue(e,NaN);const t=this.playersOnDuty.get(e).riders;t.length&&t.forEach((e=>{global.exports["armoury-overlay"].setTaximeterValue(e,NaN)})),this.playersOnDuty.delete(e)}t||this.showTaxiNotOnDutyMessage(e)}isPlayerOnDuty(e){return this.playersOnDuty.has(e)}getPlayerFare(e){return this.playersOnDuty.has(e)?this.playersOnDuty.get(e).fare:NaN}getPlayerFareCached(e){return Math.max(25,Math.min(75,this.getPlayerClientsidedCacheKey(e,"fare")))||Math.floor(50)}setPlayerFare(e,t){const s=Math.floor(Math.min(Math.max(t,25),75));this.playersOnDuty.has(e)&&this.playersOnDuty.set(e,Object.assign(Object.assign({},this.playersOnDuty.get(e)),{fare:s})),this.updatePlayerClientsidedCacheKey(e,"fare",s)}getMaxFare(){return 75}getMinFare(){return 25}onPlayerEnterVehicle(e,t){const s=NetworkGetEntityFromNetworkId(e);if(this.isVehicleOwnedByThisFaction(s)&&(this.isPlayerMemberOfThisFaction(source)&&(global.exports["general-context-menu"].addCachedButton(source,{label:"Taxi",metadata:{buttonId:"taxi-driver",vehicleNetworkId:e}}),this.showTaxiNotOnDutyMessage(source)),t>-1)){const e=GetPedInVehicleSeat(s,-1);if(e>0&&e!==GetPlayerPed(source)){const t=NetworkGetEntityOwner(e);if(t>=0&&this.playersOnDuty.has(t)){const e=this.playersOnDuty.get(t);this.playersOnDuty.set(t,Object.assign(Object.assign({},e),{riders:[...this.playersOnDuty.get(t).riders,source]})),this.updatePlayerTaximeterValue(source,e.currentRidePay)}}}}onPlayerExitVehicle(e){const t=NetworkGetEntityFromNetworkId(e);if(this.spawnedVehicles.includes(t)){const e=GetPedInVehicleSeat(t,-1);if(e>0&&e!==GetPlayerPed(source)){const t=NetworkGetEntityOwner(e);if(this.playersOnDuty.has(t)){const e=this.playersOnDuty.get(t);this.playersOnDuty.set(t,Object.assign(Object.assign({},e),{riders:e.riders.filter((e=>e!==source))}))}}this.isPlayerOnDuty(source)?this.stopPlayerDuty(source,!0):global.exports["armoury-overlay"].setTaximeterValue(source,NaN),this.isPlayerMemberOfThisFaction(source)&&(global.exports["general-context-menu"].removeCachedButton(source,"taxi-driver"),this.hideTaxiNotOnDutyMessage(source))}}onDriverIntervalPassed(){if(this.playersOnDuty.has(source)&&Date.now()-this.playersOnDuty.get(source).lastDistanceCheckTimestamp>=2250){const a=GetEntityCoords(GetPlayerPed(source),!0),i=this.playersOnDuty.get(source).lastDistanceCheckPosition||a,o=(t=(e=[a[0],a[1],a[2],i[0],i[1],i[2]])[3]-e[0],s=e[4]-e[1],r=e[5]-e[2],.004*Math.hypot(t,s,r));this.playersOnDuty.set(source,Object.assign(Object.assign({},this.playersOnDuty.get(source)),{lastDistanceCheckTimestamp:Date.now(),lastDistanceCheckPosition:a})),this.addToPlayerTaximeterValue(source,Math.max(0,Math.floor(o*this.getPlayerFare(source)))),this.playersOnDuty.get(source).riders.forEach((e=>{this.updatePlayerTaximeterValue(e,this.playersOnDuty.get(source).currentRidePay)}))}var e,t,s,r}showTaxiNotOnDutyMessage(e){global.exports["armoury-overlay"].setMessage(e,{id:"taxi-not-on-duty",content:"You will not yet receive calls because you are not on duty."})}hideTaxiNotOnDutyMessage(e){global.exports["armoury-overlay"].deleteMessage(e,{id:"taxi-not-on-duty"})}};h([n()],y.prototype,"getAvailableTaxiDrivers",null),h([n()],y.prototype,"startPlayerRide",null),h([n()],y.prototype,"stopPlayerRide",null),h([n()],y.prototype,"updatePlayerTaximeterValue",null),h([n()],y.prototype,"addToPlayerTaximeterValue",null),h([n()],y.prototype,"isPlayerBusyWithRide",null),h([n()],y.prototype,"startPlayerDuty",null),h([n()],y.prototype,"stopPlayerDuty",null),h([n()],y.prototype,"isPlayerOnDuty",null),h([n()],y.prototype,"getPlayerFare",null),h([n()],y.prototype,"getPlayerFareCached",null),h([n()],y.prototype,"setPlayerFare",null),h([n()],y.prototype,"getMaxFare",null),h([n()],y.prototype,"getMinFare",null),h([o()],y.prototype,"onPlayerEnterVehicle",null),h([o()],y.prototype,"onPlayerExitVehicle",null),h([o({eventName:`${GetCurrentResourceName()}:driver-interval-passed`})],y.prototype,"onDriverIntervalPassed",null),y=h([i()],y),new y})();