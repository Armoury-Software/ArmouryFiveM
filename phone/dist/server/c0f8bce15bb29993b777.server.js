(()=>{"use strict";var e=function(e,t,s,n){return new(s||(s=Promise))((function(i,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(r,a)}l((n=n.apply(e,t||[])).next())}))};new class extends class extends class extends class extends class{constructor(){this.routingBucketCondition=(e,t)=>!0,this.assignServerBaseListeners()}RegisterAdminCommand(e,t,s,n){RegisterCommand(e,((e,n,i)=>{Number(global.exports.authentication.getPlayerInfo(e,"adminLevel"))<t||s(e,n,i)}),n)}assignServerBaseListeners(){onNet(`${GetCurrentResourceName()}:set-client-routing-bucket`,((e,t)=>{this.routingBucketCondition(e,t)&&SetEntityRoutingBucket(e,t)}))}}{removeClientsideVehicles(){TriggerClientEvent(`${GetCurrentResourceName()}:ARM_remove-vehicles`,-1)}}{}{constructor(e){super(),this.dbTableName=e,this._entities=[],this.loadDBEntities(),this._assignExports(),this.assignDBEntityCommunicationListeners()}get entities(){return this._entities}getEntities(){return this._entities}createEntity(t){return(()=>e(this,void 0,void 0,(function*(){try{const e=this.getEntityProperties(t),s=this.getEntityPropertiesValues(t,e),n=yield global.exports.oxmysql.insert_async(`INSERT INTO \`${this.dbTableName}\` (${e.join(", ")}) VALUES (${Array(e.length).fill("?").join(", ")})`,s);return this._entities.push(Object.assign(Object.assign({},t),{id:n})),this.syncWithClients(),n}catch(e){return console.log(e),null}})))()}removeEntity(t){return(()=>e(this,void 0,void 0,(function*(){try{const e=yield global.exports.oxmysql.query_async(`DELETE FROM \`${this.dbTableName}\` WHERE id = ?`,[t.id]);return this._entities=this._entities.filter((e=>e.id!==t.id)),this.syncWithClients(),!!e}catch(e){return console.log(e),!1}})))()}saveDBEntityAsync(t){return(()=>e(this,void 0,void 0,(function*(){try{const e=this.getEntityByDBId(t),s=this.getEntityProperties(e),n=this.getEntityPropertiesValues(e,s),i=" = ?, ",o=yield global.exports.oxmysql.update_async(`UPDATE \`${this.dbTableName}\` SET ${s.join(i).concat(i).slice(0,-2)} WHERE id = ?`,[...n,e.id]);return o&&this.syncWithClients(),o>0}catch(e){return console.log(e),!1}})))()}getEntityByDBId(e){return this._entities.find((t=>t.id===e))}loadDBEntities(){setImmediate((()=>e(this,void 0,void 0,(function*(){const e=(yield global.exports.oxmysql.query_async(`SELECT * FROM \`${this.dbTableName}\``,[])).map((e=>(Object.keys(e).forEach((t=>{var s;e[t]=JSON.parse((s=e[t].toString(),!/^\s*$/.test(s)&&(s=(s=(s=s.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@")).replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]")).replace(/(?:^|:|,)(?:\s*\[)+/g,""),/^[\],:{}\s]*$/.test(s))?e[t]:`"${e[t]}"`),(function(e,t){return"object"==typeof t||isNaN(t)?t:Number(t)}))})),e)));(null==e?void 0:e.length)&&(this._entities=e,setTimeout((()=>{this.syncWithClients()}),2e3))}))))}getEntityProperties(e){const t=[];for(let s in e)"id"!==s&&t.push(s);return t}assignDBEntityCommunicationListeners(){onNet("authentication:player-authenticated",(e=>{this._entities.length&&this.syncWithClients(e)}))}getEntityPropertiesValues(e,t){return t.map((t=>Array.isArray(e[t])?JSON.stringify(e[t]):e[t].toString()))}syncWithClients(e){TriggerClientEvent(`${GetCurrentResourceName()}:db-send-entities`,e||-1,this.entities)}_assignExports(){exports("getEntities",this.getEntities.bind(this))}}{constructor(e){super(e),this.phones=new Map,this.activeConversations=new Map,this.registerListeners()}registerListeners(){onNet(`${GetCurrentResourceName()}:add-contact`,(e=>{const t=this.entities.find((e=>e.id===Number(global.exports.authentication.getPlayerInfo(source,"phone"))));t&&(t.contacts.push(e),this.saveDBEntityAsync(t.id))})),onNet(`${GetCurrentResourceName()}:request-use-phone`,(()=>{const e=[...global.exports.factions.getOnlineFactionMembers("taxi").map((e=>({name:GetPlayerName(e.onlineId),phone:global.exports.authentication.getPlayerInfo(e.onlineId,"phone").toString(),service:"taxi"})))],t=Object.assign(Object.assign({},this.entities.find((e=>e.id===Number(global.exports.authentication.getPlayerInfo(source,"phone"))))),{serviceAgents:e});TriggerClientEvent(`${GetCurrentResourceName()}:force-showui`,source,t)})),onNet(`${GetCurrentResourceName()}:request-service-call`,(e=>{e.phone?this.executeCall(source,Number(e.phone)):e.service})),onNet(`${GetCurrentResourceName()}:execute-call`,(e=>{console.log("attempting to start a call on server.ts. source:",source,"callingTo:",e),this.executeCall(source,e)})),onNet(`${GetCurrentResourceName()}:answer-call`,(e=>{const t=Number(global.exports.authentication.getPlayerInfo(source,"phone"));this.answerCall(t,e)})),onNet(`${GetCurrentResourceName()}:refuse-call`,(e=>{console.log("toRefused:",e);const t=Number(global.exports.authentication.getPlayerInfo(source,"phone"));this.refuseCall(t,e)})),onNet("authentication:player-authenticated",((e,t)=>{this.phones.set(t.phone,e)})),onNet("playerDropped",(()=>{const e=Array.from(this.phones.keys()).find((e=>this.phones[e]===source));e&&this.phones.delete(e)}))}executeCall(e,t){console.log("(server.ts:) finding a player with that phone number ("+t+")"),console.log("(server.ts:) typeof callingTo: ",typeof t);const s=this.phones.get(t),n=Number(global.exports.authentication.getPlayerInfo(e,"phone"));s?(console.log("(server.ts:) found a player with that phone number"),this.activeConversations.set(n,s),this.notifyPlayerIsBeingCalled(s,e)):(console.log("(server.ts:) found no player with that phone number"),console.log("(server.ts:) current phones: ",Array.from(this.phones.keys()),Array.from(this.phones.values())))}notifyPlayerIsBeingCalled(e,t){const s=Number(global.exports.authentication.getPlayerInfo(e,"phone")),n=Object.assign(Object.assign({},this.entities.find((e=>e.id===s))),{myNumber:s,isBeingCalledBy:t});TriggerClientEvent(`${GetCurrentResourceName()}:force-showui`,e,n)}answerCall(e,t){if(!this.activeConversations.has(t)||this.activeConversations.get(t)!==e)return console.log("(server.ts:) removing active conversation because of issue.."),void this.activeConversations.delete(t);console.log("(server.ts:) assigning",GetPlayerName(e),"and",GetPlayerName(t),"into a call.."),global.exports["pma-voice"].setPlayerCall(t,t),global.exports["pma-voice"].setPlayerCall(e,t);const s=this.phones.get(t);TriggerClientEvent(`${GetCurrentResourceName()}:called-picked-up`,s)}refuseCall(e,t){console.log("(server.ts:) clearing",GetPlayerName(e),"and",GetPlayerName(t),"conversation.."),this.activeConversations.has(t)&&this.activeConversations.delete(t);const s=this.phones.get(t);TriggerClientEvent(`${GetCurrentResourceName()}:called-refused-call`,s)}}("phone_contacts")})();