import { Vector3 } from '../';
import { DrivingStyle, HelmetType, RagdollType, SpeechModifier, VehicleSeat } from '../enums';
import { WeaponHash } from '../hashes';
import { Entity, PedBoneCollection, Vehicle } from './';
export declare class Ped extends Entity {
    static exists(ped: Ped): boolean;
    private pedBones;
    private readonly speechModifierNames;
    constructor(handle: number);
    get Health(): number;
    set Health(amount: number);
    get MaxHealth(): number;
    set MaxHealth(amount: number);
    get CurrentVehicle(): Vehicle;
    get LastVehicle(): Vehicle;
    get VehicleTryingToEnter(): Vehicle;
    get IsJumpingOutOfVehicle(): boolean;
    set StaysInVehicleWhenJacked(value: boolean);
    set MaxDrivingSpeed(value: number);
    get IsHuman(): boolean;
    set IsEnemy(value: boolean);
    set IsPriorityTargetForEnemies(value: boolean);
    get IsPlayer(): boolean;
    get IsCuffed(): boolean;
    get IsWearingHelmet(): boolean;
    get IsRagdoll(): boolean;
    get IsIdle(): boolean;
    get IsProne(): boolean;
    set IsDucking(value: boolean);
    get IsDucking(): boolean;
    get IsGettingUp(): boolean;
    get IsClimbing(): boolean;
    get IsJumping(): boolean;
    get IsFalling(): boolean;
    get IsStopped(): boolean;
    get IsWalking(): boolean;
    get IsRunning(): boolean;
    get IsSprinting(): boolean;
    get IsDiving(): boolean;
    get IsInParachuteFreeFall(): boolean;
    get IsSwimming(): boolean;
    get IsSwimmingUnderWater(): boolean;
    get IsVaulting(): boolean;
    get IsOnBike(): boolean;
    get IsOnFoot(): boolean;
    get IsInSub(): boolean;
    get IsInTaxi(): boolean;
    get IsInTrain(): boolean;
    get IsInHeli(): boolean;
    get IsInPlane(): boolean;
    get IsInFlyingVehicle(): boolean;
    get IsInBoat(): boolean;
    get IsInPoliceVehicle(): boolean;
    get IsJacking(): boolean;
    get IsBeingJacked(): boolean;
    get IsGettingIntoAVehicle(): boolean;
    get IsTryingToEnterALockedVehicle(): boolean;
    get IsInjured(): boolean;
    get IsFleeing(): boolean;
    get IsInCombat(): boolean;
    get IsInMeleeCombat(): boolean;
    get IsInStealthMode(): boolean;
    get IsAmbientSpeechPlaying(): boolean;
    get IsScriptedSpeechPlaying(): boolean;
    get IsAnySpeechPlaying(): boolean;
    get IsAmbientSpeechEnabled(): boolean;
    set IsPainAudioEnabled(value: boolean);
    get IsPlantingBomb(): boolean;
    get IsShooting(): boolean;
    get IsReloading(): boolean;
    get IsDoingDriveby(): boolean;
    get IsGoingIntoCover(): boolean;
    get IsBeingStunned(): boolean;
    get IsBeingStealthKilled(): boolean;
    get IsPerformingStealthKill(): boolean;
    get IsAimingFromCover(): boolean;
    isInCover(expectUseWeapon?: boolean): boolean;
    get IsInCoverFacingLeft(): boolean;
    set FiringPattern(value: number);
    set DropsWeaponsOnDeath(value: boolean);
    set DrivingSpeed(value: number);
    set DrivingStyle(style: DrivingStyle);
    isInAnyVehicle(): boolean;
    isInVehicle(vehicle: Vehicle): boolean;
    isSittingInAnyVehicle(): boolean;
    isSittingInVehicle(vehicle: Vehicle): boolean;
    setIntoVehicle(vehicle: Vehicle, seat: VehicleSeat): void;
    isHeadtracking(entity: Entity): boolean;
    isInCombatAgainst(target: Ped): boolean;
    getJacker(): Ped;
    getJackTarget(): Ped;
    getMeleeTarget(): Ped;
    getKiller(): Entity;
    kill(): void;
    resurrect(): void;
    resetVisibleDamage(): void;
    clearBloodDamage(): void;
    get IsInGroup(): boolean;
    set NeverLeavesGroup(value: boolean);
    leaveGroup(): void;
    playAmbientSpeed(speechName: string, voiceName?: string, modifier?: SpeechModifier): void;
    applyDamage(damageAmount: number): void;
    hasBeenDamagedByWeapon(weapon: WeaponHash): boolean;
    hasBeenDamagedByAnyWeapon(): boolean;
    hasBeenDamagedByAnyMeleeWeapon(): boolean;
    clearLastWeaponDamage(): void;
    get Bones(): PedBoneCollection;
    giveWeapon(weapon: WeaponHash, ammoCount?: number, isHidden?: boolean, equipNow?: boolean): void;
    removeWeapon(weapon: WeaponHash): void;
    removeAllWeapons(): void;
    getLastWeaponImpactPosition(): Vector3;
    get CanRagdoll(): boolean;
    set CanRagdoll(value: boolean);
    ragdoll(duration?: number, ragdollType?: RagdollType): void;
    cancelRagdoll(): void;
    giveHelmet(canBeRemovedByPed: boolean, helmetType: HelmetType, textureIndex: number): void;
    removeHelmet(instantly: boolean): void;
    openParachute(): void;
    getConfigFlag(flagId: number): boolean;
    setConfigFlag(flagId: number, value: boolean): void;
    resetConfigFlag(flagId: number): void;
    clone(heading: number): Ped;
    exists(ped?: Ped): boolean;
}
